// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gis

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion7

// MadinaGisServiceClient is the client API for MadinaGisService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type MadinaGisServiceClient interface {
	GetLocationInfo(ctx context.Context, in *LocationRequest, opts ...grpc.CallOption) (*LocationResponse, error)
	GetParcelStreetData(ctx context.Context, in *LocationRequest, opts ...grpc.CallOption) (*ParcelStreetResponse, error)
	GetSatelliteViewData(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SatelliteResponse, error)
	ConvertUTMToLatLon(ctx context.Context, in *UTMRequest, opts ...grpc.CallOption) (*LatLonResponse, error)
}

type madinaGisServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewMadinaGisServiceClient(cc grpc.ClientConnInterface) MadinaGisServiceClient {
	return &madinaGisServiceClient{cc}
}

func (c *madinaGisServiceClient) GetLocationInfo(ctx context.Context, in *LocationRequest, opts ...grpc.CallOption) (*LocationResponse, error) {
	out := new(LocationResponse)
	err := c.cc.Invoke(ctx, "/gis.MadinaGisService/GetLocationInfo", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *madinaGisServiceClient) GetParcelStreetData(ctx context.Context, in *LocationRequest, opts ...grpc.CallOption) (*ParcelStreetResponse, error) {
	out := new(ParcelStreetResponse)
	err := c.cc.Invoke(ctx, "/gis.MadinaGisService/GetParcelStreetData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *madinaGisServiceClient) GetSatelliteViewData(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*SatelliteResponse, error) {
	out := new(SatelliteResponse)
	err := c.cc.Invoke(ctx, "/gis.MadinaGisService/GetSatelliteViewData", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *madinaGisServiceClient) ConvertUTMToLatLon(ctx context.Context, in *UTMRequest, opts ...grpc.CallOption) (*LatLonResponse, error) {
	out := new(LatLonResponse)
	err := c.cc.Invoke(ctx, "/gis.MadinaGisService/ConvertUTMToLatLon", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// MadinaGisServiceServer is the server API for MadinaGisService service.
// All implementations must embed UnimplementedMadinaGisServiceServer
// for forward compatibility
type MadinaGisServiceServer interface {
	GetLocationInfo(context.Context, *LocationRequest) (*LocationResponse, error)
	GetParcelStreetData(context.Context, *LocationRequest) (*ParcelStreetResponse, error)
	GetSatelliteViewData(context.Context, *Empty) (*SatelliteResponse, error)
	ConvertUTMToLatLon(context.Context, *UTMRequest) (*LatLonResponse, error)
	mustEmbedUnimplementedMadinaGisServiceServer()
}

// UnimplementedMadinaGisServiceServer must be embedded to have forward compatible implementations.
type UnimplementedMadinaGisServiceServer struct {
}

func (UnimplementedMadinaGisServiceServer) GetLocationInfo(context.Context, *LocationRequest) (*LocationResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetLocationInfo not implemented")
}
func (UnimplementedMadinaGisServiceServer) GetParcelStreetData(context.Context, *LocationRequest) (*ParcelStreetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetParcelStreetData not implemented")
}
func (UnimplementedMadinaGisServiceServer) GetSatelliteViewData(context.Context, *Empty) (*SatelliteResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method GetSatelliteViewData not implemented")
}
func (UnimplementedMadinaGisServiceServer) ConvertUTMToLatLon(context.Context, *UTMRequest) (*LatLonResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ConvertUTMToLatLon not implemented")
}
func (UnimplementedMadinaGisServiceServer) mustEmbedUnimplementedMadinaGisServiceServer() {}

// UnsafeMadinaGisServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to MadinaGisServiceServer will
// result in compilation errors.
type UnsafeMadinaGisServiceServer interface {
	mustEmbedUnimplementedMadinaGisServiceServer()
}

func RegisterMadinaGisServiceServer(s *grpc.Server, srv MadinaGisServiceServer) {
	s.RegisterService(&_MadinaGisService_serviceDesc, srv)
}

func _MadinaGisService_GetLocationInfo_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MadinaGisServiceServer).GetLocationInfo(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gis.MadinaGisService/GetLocationInfo",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MadinaGisServiceServer).GetLocationInfo(ctx, req.(*LocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MadinaGisService_GetParcelStreetData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(LocationRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MadinaGisServiceServer).GetParcelStreetData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gis.MadinaGisService/GetParcelStreetData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MadinaGisServiceServer).GetParcelStreetData(ctx, req.(*LocationRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _MadinaGisService_GetSatelliteViewData_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MadinaGisServiceServer).GetSatelliteViewData(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gis.MadinaGisService/GetSatelliteViewData",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MadinaGisServiceServer).GetSatelliteViewData(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _MadinaGisService_ConvertUTMToLatLon_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UTMRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(MadinaGisServiceServer).ConvertUTMToLatLon(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gis.MadinaGisService/ConvertUTMToLatLon",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(MadinaGisServiceServer).ConvertUTMToLatLon(ctx, req.(*UTMRequest))
	}
	return interceptor(ctx, in, info, handler)
}

var _MadinaGisService_serviceDesc = grpc.ServiceDesc{
	ServiceName: "gis.MadinaGisService",
	HandlerType: (*MadinaGisServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "GetLocationInfo",
			Handler:    _MadinaGisService_GetLocationInfo_Handler,
		},
		{
			MethodName: "GetParcelStreetData",
			Handler:    _MadinaGisService_GetParcelStreetData_Handler,
		},
		{
			MethodName: "GetSatelliteViewData",
			Handler:    _MadinaGisService_GetSatelliteViewData_Handler,
		},
		{
			MethodName: "ConvertUTMToLatLon",
			Handler:    _MadinaGisService_ConvertUTMToLatLon_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "gis.proto",
}
